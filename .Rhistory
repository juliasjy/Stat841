getData <- function(name){
data <- read.csv(paste0("./eurosat-w2020/", name))
return (data)
}
train_data <- getData("train.csv")
test_data <- getData("test.csv")
View(test_data)
is.na(test_data)
sum(is.na(test_data))
sum(is.na(test_data) == T)
sum(is.na(train_data))
head(train_data)
summary(train_data)
train_data_cleaned <- na.omit(train_data)
nrow(train_data_cleaned)
nrow(train_data)
ncol(train_data)
train_data[,273]
ggplot(err.df.plot) + geom_line(aes(x = k, y = value,
color = variable)) +
geom_point(aes(x = k, y = value,
color = variable)) +
labs(title = "Test & Training Error", x = "k", y = "Error") +
theme(legend.position = "bottom",
plot.margin = unit(c(.2,1,.2,.2), "cm")) +
scale_color_manual(name="",
labels=c("Training Error","Test Error"),
values=c("red","blue")) +
theme_bw()
getData <- function(name){
data <- read.csv(paste0("./eurosat-w2020/", name))
return (data)
}
train_data <- getData("train.csv")
test_data <- getData("test.csv")
###################################
library(class)
library(ggplot2)
#### Split training and test data (75%, 25%) ####
set.seed(20200214)
trainSize <- floor(nrow(train_data)*0.75)
trainInx <- sample(seq_len(nrow(train_data)),size = trainSize)
train.X <- data[trainInx, 2:(ncol(train_data)-1)]
test.X <- data[-trainInx, 2:(ncol(train_data)-1)]
train.y <- data[trainInx, ncol(train_data)]
test.y <- data[-trainInx, ncol(train_data)]
## knn
k_range <- c(1:10) # range of k
err.df <- data.frame(k = rep(0, length(k_range)),
train.err = rep(0, length(k_range)),
test.err = rep(0, length(k_range)))
i <- 1
for(k in k_range){
knn.test.pred <- knn(train = train.X, test = test.X, cl = train.y, k = k) # knn for test data
knn.train.pred <- knn(train = train.X, test = train.X, cl = train.y, k = k) # knn for training data
train.err <- mean(train.y != knn.train.pred) # training error
test.err <- mean(test.y != knn.test.pred) # test error
# err.df each row three columns: k, training error, test error
err.df[i,] <- c(k, train.err, test.err)
i <- i+1
}
err.df.plot <- reshape2::melt(err.df, id.vars = "k")
ggplot(err.df.plot) + geom_line(aes(x = k, y = value,
color = variable)) +
geom_point(aes(x = k, y = value,
color = variable)) +
labs(title = "Test & Training Error", x = "k", y = "Error") +
theme(legend.position = "bottom",
plot.margin = unit(c(.2,1,.2,.2), "cm")) +
scale_color_manual(name="",
labels=c("Training Error","Test Error"),
values=c("red","blue")) +
theme_bw()
set.seed(20200214)
trainSize <- floor(nrow(train_data)*0.75)
trainInx <- sample(seq_len(nrow(train_data)),size = trainSize)
train.X <- train_data[trainInx, 2:(ncol(train_data)-1)]
test.X <- train_data[-trainInx, 2:(ncol(train_data)-1)]
train.y <- train_data[trainInx, ncol(train_data)]
test.y <- train_data[-trainInx, ncol(train_data)]
## knn
k_range <- c(1:10) # range of k
err.df <- data.frame(k = rep(0, length(k_range)),
train.err = rep(0, length(k_range)),
test.err = rep(0, length(k_range)))
i <- 1
for(k in k_range){
knn.test.pred <- knn(train = train.X, test = test.X, cl = train.y, k = k) # knn for test data
knn.train.pred <- knn(train = train.X, test = train.X, cl = train.y, k = k) # knn for training data
train.err <- mean(train.y != knn.train.pred) # training error
test.err <- mean(test.y != knn.test.pred) # test error
# err.df each row three columns: k, training error, test error
err.df[i,] <- c(k, train.err, test.err)
i <- i+1
}
err.df.plot <- reshape2::melt(err.df, id.vars = "k")
ggplot(err.df.plot) + geom_line(aes(x = k, y = value,
color = variable)) +
geom_point(aes(x = k, y = value,
color = variable)) +
labs(title = "Test & Training Error", x = "k", y = "Error") +
theme(legend.position = "bottom",
plot.margin = unit(c(.2,1,.2,.2), "cm")) +
scale_color_manual(name="",
labels=c("Training Error","Test Error"),
values=c("red","blue")) +
theme_bw()
?knn
textData <- read.
textData <- read.delim("./eurosat-w2020/codebook_long.txt")
View(textData)
?read.delim
library(rex)
install.packages("rex")
library(rex)
class(textData)
View(textData)
?read.delim
textData <- read.delim("./eurosat-w2020/codebook_long.txt", sep = "type:")
textData <- read.delim("./eurosat-w2020/codebook_long.txt", sep = "\t")
textData <- read.delim("./eurosat-w2020/codebook_long.txt", header = F, sep = "\t")
textData <- read.delim("./eurosat-w2020/codebook_long.txt", header = F, stringsAsFactors = F)
View(textData)
re_matches(data = textData, pattern = rex(capture("type:")))
strings <- c("abcd", "cdab", "cabd", "c abd")
grep("ab", string)
strings <- c("abcd", "cdab", "cabd", "c abd")
grep("ab", strings)
grep("type:", textData)
grep("type:", textData$V1)
textData[grep("type:", textData$V1),]
grep("a", "abc")
grep("d", "abc")
type <- textData[grep("type:", textData$V1),]
textDataShort <- read.delim("./eurosat-w2020/codebook_compact.txt", header = T, stringsAsFactors = F)
View(textDataShort)
textDataShort <- read.table("./eurosat-w2020/codebook_compact.txt", header = T, stringsAsFactors = F)
textDataShort <- read.delim("./eurosat-w2020/codebook_compact.txt", header = T, stringsAsFactors = F)
textDataShort[10:,]
textDataShort[10:]
textDataShort[10:nrow(textDataShort)]
textDataShort[10:nrow(textDataShort),]
textDataShort <- textDataShort[10:284,]
textDataShort <- read.delim("./eurosat-w2020/codebook_compact.txt", header = F, stringsAsFactors = F)
textDataShort <- textDataShort[10:284,]
textDataShort <- read.delim("./eurosat-w2020/codebook_compact.txt", header = F, stringsAsFactors = F)
textDataShort <- textDataShort[12:284,]
textDataShort <- textDataShort[10:282,]
textDataShort <- read.delim("./eurosat-w2020/codebook_compact.txt", header = F, stringsAsFactors = F)
textDataShort <- textDataShort[10:282,]
textDataShort <- textDataShort[10:281,]
textDataShort <- textDataShort[10:281,]
textDataShort <- read.delim("./eurosat-w2020/codebook_compact.txt", header = F, stringsAsFactors = F)
textDataShort <- textDataShort[10:281,]
textDataShort <- read.delim("./eurosat-w2020/codebook_compact.txt", header = F, stringsAsFactors = F)
textDataShort <- textDataShort[10:280,]
textDataShort <- read.delim("./eurosat-w2020/codebook_compact.txt", header = F, stringsAsFactors = F)
textDataShort <- textDataShort[10:280,]
textDataShortDF <- data.frame(textDataShort)
View(textDataShortDF)
textDataShortDF <- seperate(textDataShort, col = c("Var", "Unique", "Mean", "Min", "Max", "Label"))
library(tidyr)
textDataShortDF <- tidyr::seperate(textDataShort, col = c("Var", "Unique", "Mean", "Min", "Max", "Label"))
textDataShortDF <- tidyr::separate(textDataShort, col = c("Var", "Unique", "Mean", "Min", "Max", "Label"))
textDataShortDF <- tidyr::separate(data.frame(textDataShort), col = c("Var", "Unique", "Mean", "Min", "Max", "Label"))
as.vector(textDataShort)
textDataShortDF <- tidyr::separate(as.vector(textDataShort), col = c("Var", "Unique", "Mean", "Min", "Max", "Label"))
textDataShortVector <- as.vector(textDataShort)
View(textDataShortDF)
textDataShortDF <- tidyr::separate(data.frame(textDataShort), col = c("Var", "Unique", "Mean", "Min", "Max", "Label"))
textDataShortDF <- tidyr::separate(data.frame(textDataShort), col = c("a", "Unique", "Mean", "Min", "Max", "Label"))
colnames(textDataShort) <- c("temp")
data.frame(temp = textDataShort)
textDataShortDF <- data.frame(temp = textDataShort)
View(textDataShortDF)
textDataShortDF <- tidyr::separate(textDataShortDF$temp, col = c("a", "Unique", "Mean", "Min", "Max", "Label"))
textDataShortDF <- textDataShortDF %>% separate(temp, col = c("a", "Unique", "Mean", "Min", "Max", "Label"))
textDataShort <- read.delim("./eurosat-w2020/codebook_compact.txt", header = F, stringsAsFactors = F)
textDataShort <- textDataShort[10:280,]
colnames(textDataShort) <- c("temp")
textDataShortDF <- data.frame(temp = textDataShort)
DF <- textDataShortDF %>% separate(temp, col = c("a", "Unique", "Mean", "Min", "Max", "Label"))
DF <- textDataShortDF %>% separate(temp, col = c("Var", "Obs", "Unique", "Mean", "Min", "Max", "Label"))
DF <- textDataShortDF %>% separate(temp, c("Var", "Obs", "Unique", "Mean", "Min", "Max", "Label"))
View(DF)
DF <- textDataShortDF %>% separate(data = temp, col = c("Var", "Obs", "Unique", "Mean", "Min", "Max", "Label"), sep = " ")
DF <- separate(data = textDataShortDF$temp, col = c("Var", "Obs", "Unique", "Mean", "Min", "Max", "Label"), sep = " ")
DF <- separate(data = textDataShortDF$temp, col = c("Var", "Obs", "Unique", "Mean", "Min", "Max", "Label"), sep = "\ ")
DF <- separate(data = textDataShortDF$temp, col = c("Var", "Obs", "Unique", "Mean", "Min", "Max", "Label"))
DF <- textDataShortDF %>% separate(temp, c("Var", "Obs", "Unique", "Mean", "Min", "Max", "Label"))
DF <- textDataShortDF %>% separate(temp, c("Var", "Obs", "Unique", "Mean", "Min", "Max", "Label"), sep=" ")
textDataShort <- read.csv("./eurosat-w2020/codebook_compact.csv", header = T, stringsAsFactors = F)
View(textDataShort)
textDataShort <- read.csv("./eurosat-w2020/codebook_compact.csv", header = T, stringsAsFactors = F)
1 || 0
any(1,0)
