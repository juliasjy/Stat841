for(L in 2:50){
Ps <- c(Ps, Y/16*((patch+1)/(Y+L*ds[1]))*((exercise+1)/(Y+L*ds[2]))*((probability+1)/(Y+L*ds[3]))*((help+1)/(Y+L*ds[4]))*((quit+1)/(Y+L*ds[5]))*((length+1)/(Y+L*ds[6])))}
return (Ps)}
P_NicotinePatch <- getTargetFunction(Y = 5, patch = 0, exercise = 0, probability = 1, help = 0, quit = 5, length = 0, ds = c(2,2,2,2,2,3))
P_Exercise <- getTargetFunction(Y = 6, patch = 0, exercise = 2, probability = 0, help = 2, quit = 6, length = 0, ds = c(2,2,2,2,2,3))
P_Smoking <- getTargetFunction(Y = 5, patch = 0, exercise = 0, probability = 0, help = 1, quit = 0, length = 2, ds = c(2,2,2,2,2,3))
plot(1:50, P_NicotinePatch, type='o', ylim=c(0,.0035), xlab="Laplace Smooth Tunning (L)",
ylab="Posterior Probability for Each Classification", col="red")
lines(1:50, P_Exercise, type='o', col="green")
lines(1:50, P_Smoking, type='b', col="blue")
legend("bottomright",
legend=c("Posterior Probability for Nicotine patch", "Posterior Probability for Exercise",
"Posterior Probability for Still Smoking"),
col=c("red", "green", "blue"), lty=c(1, 1), cex=1)
getTargetFunction <- function(Y, patch, exercise, probability, help, quit, length, ds){
Ps <- Y/16*((patch+1)/(Y+ds[1]))*((exercise+1)/(Y+ds[2]))*((probability+1)/(Y+ds[3]))*((help+1)/(Y+ds[4]))*((quit+1)/(Y+ds[5]))*((length+1)/(Y+ds[6]))
for(L in 2:50){
Ps <- c(Ps, Y/16*((patch+1)/(Y+L*ds[1]))*((exercise+1)/(Y+L*ds[2]))*((probability+1)/(Y+L*ds[3]))*((help+1)/(Y+L*ds[4]))*((quit+1)/(Y+L*ds[5]))*((length+1)/(Y+L*ds[6])))}
return (Ps)}
P_NicotinePatch <- getTargetFunction(Y = 5, patch = 0, exercise = 0, probability = 1, help = 0, quit = 5, length = 0, ds = c(2,2,2,2,2,3))
P_Exercise <- getTargetFunction(Y = 6, patch = 0, exercise = 2, probability = 0, help = 1, quit = 6, length = 0, ds = c(2,2,2,2,2,3))
P_Smoking <- getTargetFunction(Y = 5, patch = 0, exercise = 0, probability = 0, help = 1, quit = 0, length = 2, ds = c(2,2,2,2,2,3))
plot(1:50, P_NicotinePatch, type='o', ylim=c(0,.0035), xlab="Laplace Smooth Tunning (L)",
ylab="Posterior Probability for Each Classification", col="red")
lines(1:50, P_Exercise, type='o', col="green")
lines(1:50, P_Smoking, type='b', col="blue")
legend("bottomright",
legend=c("Posterior Probability for Nicotine patch", "Posterior Probability for Exercise",
"Posterior Probability for Still Smoking"),
col=c("red", "green", "blue"), lty=c(1, 1), cex=1)
getTargetFunction <- function(Y, patch, exercise, probability, help, quit, length, ds){
Ps <- Y/16*((patch+1)/(Y+ds[1]))*((exercise+1)/(Y+ds[2]))*((probability+1)/(Y+ds[3]))*((help+1)/(Y+ds[4]))*((quit+1)/(Y+ds[5]))*((length+1)/(Y+ds[6]))
for(L in 2:50){
Ps <- c(Ps, Y/16*((patch+1)/(Y+L*ds[1]))*((exercise+1)/(Y+L*ds[2]))*((probability+1)/(Y+L*ds[3]))*((help+1)/(Y+L*ds[4]))*((quit+1)/(Y+L*ds[5]))*((length+1)/(Y+L*ds[6])))}
return (Ps)}
P_NicotinePatch <- getTargetFunction(Y = 5, patch = 0, exercise = 0, probability = 1, help = 0, quit = 5, length = 0, ds = c(2,2,2,2,2,3))
P_Exercise <- getTargetFunction(Y = 6, patch = 6, exercise = 2, probability = 0, help = 1, quit = 6, length = 0, ds = c(2,2,2,2,2,3))
P_Smoking <- getTargetFunction(Y = 5, patch = 0, exercise = 0, probability = 0, help = 1, quit = 0, length = 2, ds = c(2,2,2,2,2,3))
plot(1:50, P_NicotinePatch, type='o', ylim=c(0,.0035), xlab="Laplace Smooth Tunning (L)",
ylab="Posterior Probability for Each Classification", col="red")
lines(1:50, P_Exercise, type='o', col="green")
lines(1:50, P_Smoking, type='b', col="blue")
legend("bottomright",
legend=c("Posterior Probability for Nicotine patch", "Posterior Probability for Exercise",
"Posterior Probability for Still Smoking"),
col=c("red", "green", "blue"), lty=c(1, 1), cex=1)
getTargetFunction <- function(Y, patch, exercise, probability, help, quit, length, ds){
Ps <- Y/16*((patch+1)/(Y+ds[1]))*((exercise+1)/(Y+ds[2]))*((probability+1)/(Y+ds[3]))*((help+1)/(Y+ds[4]))*((quit+1)/(Y+ds[5]))*((length+1)/(Y+ds[6]))
for(L in 2:50){
Ps <- c(Ps, Y/16*((patch+1)/(Y+L*ds[1]))*((exercise+1)/(Y+L*ds[2]))*((probability+1)/(Y+L*ds[3]))*((help+1)/(Y+L*ds[4]))*((quit+1)/(Y+L*ds[5]))*((length+1)/(Y+L*ds[6])))}
return (Ps)}
P_NicotinePatch <- getTargetFunction(Y = 5, patch = 0, exercise = 0, probability = 1, help = 0, quit = 5, length = 0, ds = c(2,2,2,2,2,3))
P_Exercise <- getTargetFunction(Y = 6, patch = 6, exercise = 2, probability = 0, help = 1, quit = 6, length = 0, ds = c(2,2,2,2,2,3))
P_Smoking <- getTargetFunction(Y = 5, patch = 5, exercise = 0, probability = 0, help = 1, quit = 1, length = 2, ds = c(2,2,2,2,2,3))
plot(1:50, P_NicotinePatch, type='o', ylim=c(0,.0035), xlab="Laplace Smooth Tunning (L)",
ylab="Posterior Probability for Each Classification", col="red")
lines(1:50, P_Exercise, type='o', col="green")
lines(1:50, P_Smoking, type='b', col="blue")
legend("bottomright",
legend=c("Posterior Probability for Nicotine patch", "Posterior Probability for Exercise",
"Posterior Probability for Still Smoking"),
col=c("red", "green", "blue"), lty=c(1, 1), cex=1)
getTargetFunction <- function(Y, patch, exercise, probability, help, quit, length, ds){
Ps <- Y/16*((patch+1)/(Y+ds[1]))*((exercise+1)/(Y+ds[2]))*((probability+1)/(Y+ds[3]))*((help+1)/(Y+ds[4]))*((quit+1)/(Y+ds[5]))*((length+1)/(Y+ds[6]))
for(L in 2:50){
Ps <- c(Ps, Y/16*((patch+1)/(Y+L*ds[1]))*((exercise+1)/(Y+L*ds[2]))*((probability+1)/(Y+L*ds[3]))*((help+1)/(Y+L*ds[4]))*((quit+1)/(Y+L*ds[5]))*((length+1)/(Y+L*ds[6])))}
return (Ps)}
P_NicotinePatch <- getTargetFunction(Y = 5, patch = 0, exercise = 0, probability = 1, help = 0, quit = 5, length = 0, ds = c(2,2,2,2,2,3))
P_Exercise <- getTargetFunction(Y = 6, patch = 6, exercise = 2, probability = 0, help = 1, quit = 6, length = 0, ds = c(2,2,2,2,2,3))
P_Smoking <- getTargetFunction(Y = 5, patch = 5, exercise = 0, probability = 0, help = 1, quit = 1, length = 2, ds = c(2,2,2,2,2,3))
plot(1:50, P_NicotinePatch, type='o', ylim=c(0,.0001), xlab="Laplace Smooth Tunning (L)",
ylab="Posterior Probability for Each Classification", col="red")
lines(1:50, P_Exercise, type='o', col="green")
lines(1:50, P_Smoking, type='b', col="blue")
legend("bottomright",
legend=c("Posterior Probability for Nicotine patch", "Posterior Probability for Exercise",
"Posterior Probability for Still Smoking"),
col=c("red", "green", "blue"), lty=c(1, 1), cex=1)
getTargetFunction <- function(Y, patch, exercise, probability, help, quit, length, ds){
Ps <- Y/16*((patch+1)/(Y+ds[1]))*((exercise+1)/(Y+ds[2]))*((probability+1)/(Y+ds[3]))*((help+1)/(Y+ds[4]))*((quit+1)/(Y+ds[5]))*((length+1)/(Y+ds[6]))
for(L in 2:50){
Ps <- c(Ps, Y/16*((patch+L)/(Y+L*ds[1]))*((exercise+L)/(Y+L*ds[2]))*((probability+L)/(Y+L*ds[3]))*((help+L)/(Y+L*ds[4]))*((quit+L)/(Y+L*ds[5]))*((length+L)/(Y+L*ds[6])))}
return (Ps)}
P_NicotinePatch <- getTargetFunction(Y = 5, patch = 0, exercise = 0, probability = 1, help = 0, quit = 5, length = 0, ds = c(2,2,2,2,2,3))
P_Exercise <- getTargetFunction(Y = 6, patch = 6, exercise = 2, probability = 0, help = 1, quit = 6, length = 0, ds = c(2,2,2,2,2,3))
P_Smoking <- getTargetFunction(Y = 5, patch = 5, exercise = 0, probability = 0, help = 1, quit = 1, length = 2, ds = c(2,2,2,2,2,3))
plot(1:50, P_NicotinePatch, type='o', ylim=c(0,.0001), xlab="Laplace Smooth Tunning (L)",
ylab="Posterior Probability for Each Classification", col="red")
lines(1:50, P_Exercise, type='o', col="green")
lines(1:50, P_Smoking, type='b', col="blue")
legend("bottomright",
legend=c("Posterior Probability for Nicotine patch", "Posterior Probability for Exercise",
"Posterior Probability for Still Smoking"),
col=c("red", "green", "blue"), lty=c(1, 1), cex=1)
plot(1:50, P_NicotinePatch, type='o', ylim=c(0,.0005), xlab="Laplace Smooth Tunning (L)",
ylab="Posterior Probability for Each Classification", col="red")
getTargetFunction <- function(Y, patch, exercise, probability, help, quit, length, ds){
Ps <- Y/16*((patch+1)/(Y+ds[1]))*((exercise+1)/(Y+ds[2]))*((probability+1)/(Y+ds[3]))*((help+1)/(Y+ds[4]))*((quit+1)/(Y+ds[5]))*((length+1)/(Y+ds[6]))
for(L in 2:50){
Ps <- c(Ps, Y/16*((patch+L)/(Y+L*ds[1]))*((exercise+L)/(Y+L*ds[2]))*((probability+L)/(Y+L*ds[3]))*((help+L)/(Y+L*ds[4]))*((quit+L)/(Y+L*ds[5]))*((length+L)/(Y+L*ds[6])))}
return (Ps)}
P_NicotinePatch <- getTargetFunction(Y = 5, patch = 0, exercise = 0, probability = 1, help = 0, quit = 5, length = 0, ds = c(2,2,2,2,2,3))
P_Exercise <- getTargetFunction(Y = 6, patch = 6, exercise = 2, probability = 0, help = 1, quit = 6, length = 0, ds = c(2,2,2,2,2,3))
P_Smoking <- getTargetFunction(Y = 5, patch = 5, exercise = 0, probability = 0, help = 1, quit = 1, length = 2, ds = c(2,2,2,2,2,3))
plot(1:50, P_NicotinePatch, type='o', ylim=c(0,.0005), xlab="Laplace Smooth Tunning (L)",
ylab="Posterior Probability for Each Classification", col="red")
lines(1:50, P_Exercise, type='o', col="green")
lines(1:50, P_Smoking, type='b', col="blue")
legend("bottomright",
legend=c("Posterior Probability for Nicotine patch", "Posterior Probability for Exercise",
"Posterior Probability for Still Smoking"),
col=c("red", "green", "blue"), lty=c(1, 1), cex=1)
getTargetFunction <- function(Y, patch, exercise, probability, help, quit, length, ds){
Ps <- Y/16*((patch+1)/(Y+ds[1]))*((exercise+1)/(Y+ds[2]))*((probability+1)/(Y+ds[3]))*((help+1)/(Y+ds[4]))*((quit+1)/(Y+ds[5]))*((length+1)/(Y+ds[6]))
for(L in 2:50){
Ps <- c(Ps, Y/16*((patch+L)/(Y+L*ds[1]))*((exercise+L)/(Y+L*ds[2]))*((probability+L)/(Y+L*ds[3]))*((help+L)/(Y+L*ds[4]))*((quit+L)/(Y+L*ds[5]))*((length+L)/(Y+L*ds[6])))}
return (Ps)}
P_NicotinePatch <- getTargetFunction(Y = 5, patch = 0, exercise = 0, probability = 1, help = 0, quit = 5, length = 0, ds = c(2,2,2,2,2,3))
P_Exercise <- getTargetFunction(Y = 6, patch = 6, exercise = 2, probability = 0, help = 1, quit = 6, length = 0, ds = c(2,2,2,2,2,3))
P_Smoking <- getTargetFunction(Y = 5, patch = 5, exercise = 0, probability = 0, help = 1, quit = 1, length = 2, ds = c(2,2,2,2,2,3))
plot(1:50, P_NicotinePatch, type='o', ylim=c(0,.001), xlab="Laplace Smooth Tunning (L)",
ylab="Posterior Probability for Each Classification", col="red")
lines(1:50, P_Exercise, type='o', col="green")
lines(1:50, P_Smoking, type='b', col="blue")
legend("bottomright",
legend=c("Posterior Probability for Nicotine patch", "Posterior Probability for Exercise",
"Posterior Probability for Still Smoking"),
col=c("red", "green", "blue"), lty=c(1, 1), cex=1)
getTargetFunction <- function(Y, patch, exercise, probability, help, quit, length, ds){
Ps <- Y/16*((patch+1)/(Y+ds[1]))*((exercise+1)/(Y+ds[2]))*((probability+1)/(Y+ds[3]))*((help+1)/(Y+ds[4]))*((quit+1)/(Y+ds[5]))*((length+1)/(Y+ds[6]))
for(L in 2:50){
Ps <- c(Ps, Y/16*((patch+L)/(Y+L*ds[1]))*((exercise+L)/(Y+L*ds[2]))*((probability+L)/(Y+L*ds[3]))*((help+L)/(Y+L*ds[4]))*((quit+L)/(Y+L*ds[5]))*((length+L)/(Y+L*ds[6])))}
return (Ps)}
P_NicotinePatch <- getTargetFunction(Y = 5, patch = 0, exercise = 0, probability = 1, help = 0, quit = 5, length = 0, ds = c(2,2,2,2,2,3))
P_Exercise <- getTargetFunction(Y = 6, patch = 6, exercise = 2, probability = 0, help = 1, quit = 6, length = 0, ds = c(2,2,2,2,2,3))
P_Smoking <- getTargetFunction(Y = 5, patch = 5, exercise = 0, probability = 0, help = 1, quit = 1, length = 2, ds = c(2,2,2,2,2,3))
plot(1:50, P_NicotinePatch, type='o', ylim=c(0,.005), xlab="Laplace Smooth Tunning (L)",
ylab="Posterior Probability for Each Classification", col="red")
lines(1:50, P_Exercise, type='o', col="green")
lines(1:50, P_Smoking, type='b', col="blue")
legend("bottomright",
legend=c("Posterior Probability for Nicotine patch", "Posterior Probability for Exercise",
"Posterior Probability for Still Smoking"),
col=c("red", "green", "blue"), lty=c(1, 1), cex=1)
getTargetFunction <- function(Y, patch, exercise, probability, help, quit, length, ds){
Ps <- Y/16*((patch+1)/(Y+ds[1]))*((exercise+1)/(Y+ds[2]))*((probability+1)/(Y+ds[3]))*((help+1)/(Y+ds[4]))*((quit+1)/(Y+ds[5]))*((length+1)/(Y+ds[6]))
for(L in 2:10){
Ps <- c(Ps, Y/16*((patch+L)/(Y+L*ds[1]))*((exercise+L)/(Y+L*ds[2]))*((probability+L)/(Y+L*ds[3]))*((help+L)/(Y+L*ds[4]))*((quit+L)/(Y+L*ds[5]))*((length+L)/(Y+L*ds[6])))}
return (Ps)}
P_NicotinePatch <- getTargetFunction(Y = 5, patch = 0, exercise = 0, probability = 1, help = 0, quit = 5, length = 0, ds = c(2,2,2,2,2,3))
P_Exercise <- getTargetFunction(Y = 6, patch = 6, exercise = 2, probability = 0, help = 1, quit = 6, length = 0, ds = c(2,2,2,2,2,3))
P_Smoking <- getTargetFunction(Y = 5, patch = 5, exercise = 0, probability = 0, help = 1, quit = 1, length = 2, ds = c(2,2,2,2,2,3))
plot(1:10, P_NicotinePatch, type='o', ylim=c(0,.005), xlab="Laplace Smooth Tunning (L)",
ylab="Posterior Probability for Each Classification", col="red")
lines(1:10, P_Exercise, type='o', col="green")
lines(1:10, P_Smoking, type='b', col="blue")
legend("bottomright",
legend=c("Posterior Probability for Nicotine patch", "Posterior Probability for Exercise",
"Posterior Probability for Still Smoking"),
col=c("red", "green", "blue"), lty=c(1, 1), cex=1)
getTargetFunction <- function(Y, patch, exercise, probability, help, quit, length, ds){
Ps <- 0
for(L in 1:10){
Ps <- c(Ps, Y/16*((patch+L)/(Y+L*ds[1]))*((exercise+L)/(Y+L*ds[2]))*((probability+L)/(Y+L*ds[3]))*((help+L)/(Y+L*ds[4]))*((quit+L)/(Y+L*ds[5]))*((length+L)/(Y+L*ds[6])))}
return (Ps)}
P_NicotinePatch <- getTargetFunction(Y = 5, patch = 0, exercise = 0, probability = 1, help = 0, quit = 5, length = 0, ds = c(2,2,2,2,2,3))
P_Exercise <- getTargetFunction(Y = 6, patch = 6, exercise = 2, probability = 0, help = 1, quit = 6, length = 0, ds = c(2,2,2,2,2,3))
P_Smoking <- getTargetFunction(Y = 5, patch = 5, exercise = 0, probability = 0, help = 1, quit = 1, length = 2, ds = c(2,2,2,2,2,3))
plot(1:10, P_NicotinePatch, type='o', ylim=c(0,.005), xlab="Laplace Smooth Tunning (L)",
ylab="Posterior Probability for Each Classification", col="red")
getTargetFunction <- function(Y, patch, exercise, probability, help, quit, length, ds){
Ps <- 0
for(L in 1:10){
Ps <- c(Ps, Y/16*((patch+L)/(Y+L*ds[1]))*((exercise+L)/(Y+L*ds[2]))*((probability+L)/(Y+L*ds[3]))*((help+L)/(Y+L*ds[4]))*((quit+L)/(Y+L*ds[5]))*((length+L)/(Y+L*ds[6])))}
return (Ps)}
P_NicotinePatch <- getTargetFunction(Y = 5, patch = 0, exercise = 0, probability = 1, help = 0, quit = 5, length = 0, ds = c(2,2,2,2,2,3))
P_Exercise <- getTargetFunction(Y = 6, patch = 6, exercise = 2, probability = 0, help = 1, quit = 6, length = 0, ds = c(2,2,2,2,2,3))
P_Smoking <- getTargetFunction(Y = 5, patch = 5, exercise = 0, probability = 0, help = 1, quit = 1, length = 2, ds = c(2,2,2,2,2,3))
plot(0:10, P_NicotinePatch, type='o', ylim=c(0,.005), xlab="Laplace Smooth Tunning (L)",
ylab="Posterior Probability for Each Classification", col="red")
lines(0:10, P_Exercise, type='o', col="green")
lines(0:10, P_Smoking, type='b', col="blue")
legend("bottomright",
legend=c("Posterior Probability for Nicotine patch", "Posterior Probability for Exercise",
"Posterior Probability for Still Smoking"),
col=c("red", "green", "blue"), lty=c(1, 1), cex=1)
getTargetFunction <- function(Y, patch, exercise, probability, help, quit, length, ds){
Ps <- 0
for(L in 1:10){
Ps <- c(Ps, Y/16*((patch+L)/(Y+L*ds[1]))*((exercise+L)/(Y+L*ds[2]))*((probability+L)/(Y+L*ds[3]))*((help+L)/(Y+L*ds[4]))*((quit+L)/(Y+L*ds[5]))*((length+L)/(Y+L*ds[6])))}
return (Ps)}
P_NicotinePatch <- getTargetFunction(Y = 5, patch = 0, exercise = 0, probability = 1, help = 0, quit = 5, length = 0, ds = c(2,2,2,2,2,3))
P_Exercise <- getTargetFunction(Y = 6, patch = 6, exercise = 2, probability = 0, help = 1, quit = 6, length = 0, ds = c(2,2,2,2,2,3))
P_Smoking <- getTargetFunction(Y = 5, patch = 5, exercise = 0, probability = 0, help = 1, quit = 1, length = 2, ds = c(2,2,2,2,2,3))
plot(0:10, P_NicotinePatch, type='o', ylim=c(0,.003), xlab="Laplace Smooth Tunning (L)",
ylab="Posterior Probability for Each Classification", col="red")
lines(0:10, P_Exercise, type='o', col="green")
lines(0:10, P_Smoking, type='b', col="blue")
legend("bottomright",
legend=c("Posterior Probability for Nicotine patch", "Posterior Probability for Exercise",
"Posterior Probability for Still Smoking"),
col=c("red", "green", "blue"), lty=c(1, 1), cex=1)
getTargetFunction <- function(Y, patch, exercise, probability, help, quit, length, ds){
Ps <- 0
for(L in 1:10){
Ps <- c(Ps, Y/16*((patch+L)/(Y+L*ds[1]))*((exercise+L)/(Y+L*ds[2]))*((probability+L)/(Y+L*ds[3]))*((help+L)/(Y+L*ds[4]))*((quit+L)/(Y+L*ds[5]))*((length+L)/(Y+L*ds[6])))}
return (Ps)}
P_NicotinePatch <- getTargetFunction(Y = 5, patch = 0, exercise = 0, probability = 1, help = 0, quit = 5, length = 0, ds = c(2,2,2,2,2,3))
P_Exercise <- getTargetFunction(Y = 6, patch = 6, exercise = 2, probability = 0, help = 1, quit = 6, length = 0, ds = c(2,2,2,2,2,3))
P_Smoking <- getTargetFunction(Y = 5, patch = 5, exercise = 0, probability = 0, help = 1, quit = 1, length = 2, ds = c(2,2,2,2,2,3))
plot(0:10, P_NicotinePatch, type='l', ylim=c(0,.003), xlab="Laplace Smooth Tunning (L)",
ylab="Posterior Probability for Each Classification", col="red")
lines(0:10, P_Exercise, type='l', col="green")
lines(0:10, P_Smoking, type='l', col="blue")
legend("bottomright",
legend=c("Posterior Probability for Nicotine patch", "Posterior Probability for Exercise",
"Posterior Probability for Still Smoking"),
col=c("red", "green", "blue"), lty=c(1, 1), cex=1)
getTargetFunction <- function(Y, patch, exercise, probability, help, quit, length, ds){
Ps <- 0
for(L in 1:10){
Ps <- c(Ps, Y/16*((patch+L)/(Y+L*ds[1]))*((exercise+L)/(Y+L*ds[2]))*((probability+L)/(Y+L*ds[3]))*((help+L)/(Y+L*ds[4]))*((quit+L)/(Y+L*ds[5]))*((length+L)/(Y+L*ds[6])))}
return (Ps)}
P_NicotinePatch <- getTargetFunction(Y = 5, patch = 0, exercise = 0, probability = 1, help = 0, quit = 5, length = 0, ds = c(2,2,2,2,2,3))
P_Exercise <- getTargetFunction(Y = 6, patch = 6, exercise = 2, probability = 0, help = 1, quit = 6, length = 0, ds = c(2,2,2,2,2,3))
P_Smoking <- getTargetFunction(Y = 5, patch = 5, exercise = 0, probability = 0, help = 1, quit = 1, length = 2, ds = c(2,2,2,2,2,3))
plot(0:10, P_NicotinePatch, type='l', ylim=c(0,.003), xlab="Laplace Smooth Tunning (L)",
ylab="Posterior Probability for Each Classification", col="red")
lines(0:10, P_Exercise, type='l', col="green")
lines(0:10, P_Smoking, type='l', col="blue")
legend("bottomright",
legend=c("Posterior Probability for Nicotine patch", "Posterior Probability for Exercise",
"Posterior Probability for Still Smoking"),
col=c("red", "green", "blue"), lty=c(1, 1), cex=0.8)
knitr::opts_chunk$set(echo = TRUE)
GermanCredit <- read.csv("./german_credit.csv")
View(GermanCredit)
train.x <- GermanCredit[trainInx, -c("credit", "id")]
train.x <- GermanCredit[trainInx, -c(8, 33)]
trainInx <- sample(seq_len(nrow(GermanCredit)),size = trainSize)
trainSize <- floor(nrow(GermanCredit)*0.7)
trainInx <- sample(seq_len(nrow(GermanCredit)),size = trainSize)
train.x <- GermanCredit[trainInx, -c(8, 33)]
View(train.x)
seq_len(nrow(GermanCredit))
install.packages("tree")
b)
train <- GermanCredit[trainInx]
set.seed(110)
GermanCredit <- read.csv("./german_credit.csv")
trainSize <- floor(nrow(GermanCredit)*0.7)
trainInx <- sample(seq_len(nrow(GermanCredit)), size = trainSize, replace = F)
train <- GermanCredit[trainInx]
set.seed(110)
GermanCredit <- read.csv("./german_credit.csv")
trainSize <- floor(nrow(GermanCredit)*0.7)
trainInx <- sample(seq_len(nrow(GermanCredit)), size = trainSize, replace = F)
train <- GermanCredit[trainInx,]
View(train)
train <- GermanCredit[trainInx, -33]
GermanCreditTree <- tree(credit ~.)
library(tree)
install.packages("tree")
install.packages("tree")
knitr::opts_chunk$set(echo = TRUE)
set.seed(110)
GermanCredit <- read.csv("./german_credit.csv")
trainSize <- floor(nrow(GermanCredit)*0.7)
trainInx <- sample(seq_len(nrow(GermanCredit)), size = trainSize, replace = F)
train <- GermanCredit[trainInx, -33]
test <- GermanCredit[-trainInx, -33]
library(tree)
GermanCreditTree <- tree(credit ~.)
GermanCreditTree <- tree(credit ~., train)
plot(GermanCreditTree)
text(GermanCreditTree)
text(GermanCreditTree)
plot(GermanCreditTree)
text(GermanCreditTree)
summary(GermanCreditTree)
GermanCreditTree.pred <- predict(GermanCreditTree, test, type = "class")
GermanCreditTree <- tree(credit ~., train, type = "class")
plot(GermanCreditTree, pretty = 0)
text(GermanCreditTree)
plot(GermanCreditTree)
text(GermanCreditTree, pretty = 0)
GermanCreditTree.pred <- predict(GermanCreditTree, test, type = "class")
GermanCreditTree.pred <- predict(GermanCreditTree, test)
GermanCreditTree.pred <- round(predict(GermanCreditTree, test))
GermanCreditTree.pred <- (predict(GermanCreditTree, test.x))
train.x <- GermanCredit[trainInx, -c(8, 33)]
test.x <- GermanCredit[-trainInx, -c(8, 33)]
GermanCreditTree.pred <- (predict(GermanCreditTree, test.x))
GermanCreditTree.pred <- round(predict(GermanCreditTree, test.x))
GermanCreditTree.pred1 <- round(predict(GermanCreditTree, test))
sum(GermanCreditTree.pred == GermanCreditTree.pred1)
testErr <- sum(GermanCreditTree.pred != test$credit)/nrow(test)
summary(GermanCreditTree)
cv.tree(GermanCreditTree, K = 10)
library(tree)
GermanCreditTree <- tree(credit ~., train)
plot(GermanCreditTree)
text(GermanCreditTree, pretty = 0)
GermanCreditTree.pred <- round(predict(GermanCreditTree, test))
testErr <- sum(GermanCreditTree.pred != test$credit)/nrow(test)
library(tree)
GermanCreditTree <- tree(credit ~., train)
dev.new(width = 5, height = 4)
plot(GermanCreditTree)
text(GermanCreditTree, pretty = 0)
GermanCreditTree.pred <- round(predict(GermanCreditTree, test))
testErr <- sum(GermanCreditTree.pred != test$credit)/nrow(test)
GermanCreditTree.pred <- predict(GermanCreditTree, test, type = "class")
library(dplyr)
install.packages("dplyr")
library(dplyr)
GermanCreditTree.pred <- predict(GermanCreditTree, test, type = "class")
GermanCreditTree <- tree(credit ~., train)
plot(GermanCreditTree)
text(GermanCreditTree)
GermanCreditTree.pred <- predict(GermanCreditTree, test, type = "class")
set.seed(110)
GermanCredit <- read.csv("./german_credit.csv")
trainSize <- floor(nrow(GermanCredit)*0.7)
trainInx <- sample(seq_len(nrow(GermanCredit)), size = trainSize)
train <- GermanCredit[trainInx,]
test <- GermanCredit[-trainInx,]
library(tree)
GermanCreditTree <- tree(credit ~., train)
plot(GermanCreditTree)
text(GermanCreditTree)
GermanCreditTree.pred <- predict(GermanCreditTree, test, type = "class")
set.seed(110)
GermanCredit <- data.frame(read.csv("./german_credit.csv"), stringsAsFactors = F)
trainSize <- floor(nrow(GermanCredit)*0.7)
trainInx <- sample(seq_len(nrow(GermanCredit)), size = trainSize)
train <- GermanCredit[trainInx, -33]
test <- GermanCredit[-trainInx, -33]
library(tree)
GermanCreditTree <- tree(credit ~., train)
plot(GermanCreditTree)
text(GermanCreditTree)
GermanCreditTree.pred <- predict(GermanCreditTree, test, type = "class")
set.seed(110)
GermanCredit <- data.frame(read.csv("./german_credit.csv"), stringsAsFactors = F)
GermanCredit$credit <- as.factor(GermanCredit$credit)
trainSize <- floor(nrow(GermanCredit)*0.7)
trainInx <- sample(seq_len(nrow(GermanCredit)), size = trainSize)
train <- GermanCredit[trainInx, -33]
test <- GermanCredit[-trainInx, -33]
library(tree)
GermanCreditTree <- tree(credit ~., train)
plot(GermanCreditTree)
text(GermanCreditTree)
GermanCreditTree.pred <- predict(GermanCreditTree, test, type = "class")
testErr <- sum(GermanCreditTree.pred != test$credit)/nrow(test)
set.seed(0110)
GermanCredit <- data.frame(read.csv("./german_credit.csv"), stringsAsFactors = F)
GermanCredit$credit <- as.factor(GermanCredit$credit)
trainSize <- floor(nrow(GermanCredit)*0.7)
trainInx <- sample(seq_len(nrow(GermanCredit)), size = trainSize)
train <- GermanCredit[trainInx, -33]
test <- GermanCredit[-trainInx, -33]
library(tree)
GermanCreditTree <- tree(credit ~., train)
plot(GermanCreditTree)
text(GermanCreditTree)
GermanCreditTree.pred <- predict(GermanCreditTree, test, type = "class")
testErr <- sum(GermanCreditTree.pred != test$credit)/nrow(test)
set.seed(01110)
GermanCredit <- data.frame(read.csv("./german_credit.csv"), stringsAsFactors = F)
GermanCredit$credit <- as.factor(GermanCredit$credit)
trainSize <- floor(nrow(GermanCredit)*0.7)
trainInx <- sample(seq_len(nrow(GermanCredit)), size = trainSize)
train <- GermanCredit[trainInx, -33]
test <- GermanCredit[-trainInx, -33]
library(tree)
GermanCreditTree <- tree(credit ~., train)
plot(GermanCreditTree)
text(GermanCreditTree)
GermanCreditTree.pred <- predict(GermanCreditTree, test, type = "class")
testErr <- sum(GermanCreditTree.pred != test$credit)/nrow(test)
cv.tree(GermanCreditTree, FUN = prune.misclass)
plot(GermanCreditTreeCV$k, GermanCreditTreeCV$dev, type = "b", xlab = "alpha", ylab = "error")
tTreeCV <- cv.tree(GermanCreditTree, FUN = prune.misclass)
plot(GermanCr
plot(GermanCreditTreeCV$k, GermanCreditTreeCV$dev, type = "b", xlab = "alpha", ylab = "error")
plot(GermanCreditTreeCV$k, GermanCreditTreeCV$dev, type = "b", xlab = "alpha", ylab = "error")
GermanCreditTreeCV <- cv.tree(GermanCreditTree, FUN = prune.misclass)
plot(GermanCreditTreeCV$k, GermanCreditTreeCV$dev, type = "b", xlab = "alpha", ylab = "error")
GermanCreditTreePrune <- prune.misclass(GermanCreditTree, 4)
plot(GermanCreditTreePrune)
text(GermanCreditTreePrune)
GermanCreditTreeCV <- cv.tree(GermanCreditTree, FUN = prune.misclass)
plot(GermanCreditTreeCV$k, GermanCreditTreeCV$dev, type = "b", xlab = "alpha", ylab = "error")
GermanCreditTreePrune <- prune.misclass(GermanCreditTree, 4)
plot(GermanCreditTreePrune)
text(GermanCreditTreePrune)
GermanCreditTreePrune.pred <- predict(GermanCreditTreePrune, test, type = "class")
testErr <- sum(GermanCreditTreePrune.pred != test$credit)/nrow(test)
GermanCreditTreeCV <- cv.tree(GermanCreditTree, FUN = prune.misclass)
plot(GermanCreditTreeCV$k, GermanCreditTreeCV$dev, type = "b", xlab = "alpha", ylab = "error")
GermanCreditTreePrune <- prune.misclass(GermanCreditTree, 4)
plot(GermanCreditTreePrune)
text(GermanCreditTreePrune)
GermanCreditTreePrune.pred <- predict(GermanCreditTreePrune, test, type = "class")
testErrPrune <- sum(GermanCreditTreePrune.pred != test$credit)/nrow(test)
set.seed(01110)
GermanCredit <- data.frame(read.csv("./german_credit.csv"), stringsAsFactors = F)
GermanCredit$credit <- as.factor(GermanCredit$credit)
trainSize <- floor(nrow(GermanCredit)*0.7)
trainInx <- sample(seq_len(nrow(GermanCredit)), size = trainSize)
train <- GermanCredit[trainInx, -33]
test <- GermanCredit[-trainInx, -33]
library(tree)
GermanCreditTree <- tree(credit ~., train)
plot(GermanCreditTree)
text(GermanCreditTree)
GermanCreditTree.pred <- predict(GermanCreditTree, test, type = "class")
testErr <- sum(GermanCreditTree.pred != test$credit)/nrow(test)
GermanCreditTreeCV <- cv.tree(GermanCreditTree, FUN = prune.misclass)
plot(GermanCreditTreeCV$k, GermanCreditTreeCV$dev, type = "b", xlab = "alpha", ylab = "error")
GermanCreditTreePrune <- prune.misclass(GermanCreditTree, 4)
plot(GermanCreditTreePrune)
text(GermanCreditTreePrune)
GermanCreditTreePrune.pred <- predict(GermanCreditTreePrune, test, type = "class")
testErrPrune <- sum(GermanCreditTreePrune.pred != test$credit)/nrow(test)
library(tree)
GermanCreditTree <- tree(credit ~., train)
plot(GermanCreditTree)
text(GermanCreditTree)
GermanCreditTree.pred <- predict(GermanCreditTree, test, type = "class")
testErr <- sum(GermanCreditTree.pred != test$credit)/nrow(test)
set.seed(110)
GermanCredit <- data.frame(read.csv("./german_credit.csv"), stringsAsFactors = F)
GermanCredit$credit <- as.factor(GermanCredit$credit)
trainSize <- floor(nrow(GermanCredit)*0.7)
trainInx <- sample(seq_len(nrow(GermanCredit)), size = trainSize)
train <- GermanCredit[trainInx, -33]
test <- GermanCredit[-trainInx, -33]
library(tree)
GermanCreditTree <- tree(credit ~., train)
plot(GermanCreditTree)
text(GermanCreditTree)
GermanCreditTree.pred <- predict(GermanCreditTree, test, type = "class")
testErr <- sum(GermanCreditTree.pred != test$credit)/nrow(test)
GermanCreditTreeCV <- cv.tree(GermanCreditTree, FUN = prune.misclass)
plot(GermanCreditTreeCV$k, GermanCreditTreeCV$dev, type = "b", xlab = "alpha", ylab = "error")
GermanCreditTreePrune <- prune.misclass(GermanCreditTree, 4)
plot(GermanCreditTreePrune)
text(GermanCreditTreePrune)
GermanCreditTreePrune.pred <- predict(GermanCreditTreePrune, test, type = "class")
testErrPrune <- sum(GermanCreditTreePrune.pred != test$credit)/nrow(test)
GermanCreditTree2 <- tree(credit ~., train)
plot(GermanCreditTree2)
text(GermanCreditTree2)
GermanCreditTree2.pred <- predict(GermanCreditTree2, test, type = "class")
testErr2 <- sum(GermanCreditTree2.pred != test$credit)/nrow(test)
set.seed(20110110)
trainInx <- sample(seq_len(nrow(GermanCredit)), size = trainSize)
train <- GermanCredit[trainInx, -33]
test <- GermanCredit[-trainInx, -33]
GermanCreditTree2 <- tree(credit ~., train)
plot(GermanCreditTree2)
text(GermanCreditTree2)
GermanCreditTree2.pred <- predict(GermanCreditTree2, test, type = "class")
testErr2 <- sum(GermanCreditTree2.pred != test$credit)/nrow(test)
library(tree)
set.seed(110)
GermanCredit <- data.frame(read.csv("./german_credit.csv"), stringsAsFactors = F)
GermanCredit$credit <- as.factor(GermanCredit$credit)
trainSize <- floor(nrow(GermanCredit)*0.7)
trainInx <- sample(seq_len(nrow(GermanCredit)), size = trainSize)
train <- GermanCredit[trainInx, -33]
test <- GermanCredit[-trainInx, -33]
source("./function/getData.R")
source("./function/fillMissingDataByMeanAllNumeric.R")
source("./function/fillMissingDataByMeanCountryNonNumeric.R")
library(beepr)
train_data <- getData("train.csv")
test_data <- getData("test.csv")
setwd("~/Documents/waterloo/2020winter/Stat841/Stat841")
source("./function/getData.R")
source("./function/fillMissingDataByMeanAllNumeric.R")
source("./function/fillMissingDataByMeanCountryNonNumeric.R")
library(beepr)
train_data <- getData("train.csv")
test_data <- getData("test.csv")
train_data <- fillMissingDataByMeanCountryNonNumeric(train_data)
test_data <- fillMissingDataByMeanCountryNonNumeric(test_data)
train_data$satisfied <- as.factor(train_data$satisfied)
set.seed(20200214)
trainSize <- floor(nrow(train_data)*0.75)
trainInx <- sample(seq_len(nrow(train_data)),size = trainSize)
train.x <- train_data[trainInx, -ncol(train_data)]
test.x <- train_data[-trainInx, -ncol(train_data)]
train.y <- train_data[trainInx, "satisfied"]
test.y <- train_data[-trainInx, "satisfied"]
result <- read.csv("./resultRF.csv", header = T)
View(result)
result$x+result$x
library(tidyverse)
library(caret)
library(xgboost)
install.packages("xgboost")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("xgboost")
library(tidyverse)
library(caret)
library(xgboost)
