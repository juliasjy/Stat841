for(L in 2:50){
Ps <- c(Ps, Y/16*((patch+1)/(Y+L*ds[1]))*((exercise+1)/(Y+L*ds[2]))*((probability+1)/(Y+L*ds[3]))*((help+1)/(Y+L*ds[4]))*((quit+1)/(Y+L*ds[5]))*((length+1)/(Y+L*ds[6])))}
return (Ps)}
P_NicotinePatch <- getTargetFunction(Y = 5, patch = 0, exercise = 0, probability = 1, help = 0, quit = 5, length = 0, ds = c(2,2,2,2,2,3))
P_Exercise <- getTargetFunction(Y = 6, patch = 0, exercise = 2, probability = 0, help = 2, quit = 6, length = 0, ds = c(2,2,2,2,2,3))
P_Smoking <- getTargetFunction(Y = 5, patch = 0, exercise = 0, probability = 0, help = 1, quit = 0, length = 2, ds = c(2,2,2,2,2,3))
plot(1:50, P_NicotinePatch, type='o', ylim=c(0,.0035), xlab="Laplace Smooth Tunning (L)",
ylab="Posterior Probability for Each Classification", col="red")
lines(1:50, P_Exercise, type='o', col="green")
lines(1:50, P_Smoking, type='b', col="blue")
legend("bottomright",
legend=c("Posterior Probability for Nicotine patch", "Posterior Probability for Exercise",
"Posterior Probability for Still Smoking"),
col=c("red", "green", "blue"), lty=c(1, 1), cex=1)
getTargetFunction <- function(Y, patch, exercise, probability, help, quit, length, ds){
Ps <- Y/16*((patch+1)/(Y+ds[1]))*((exercise+1)/(Y+ds[2]))*((probability+1)/(Y+ds[3]))*((help+1)/(Y+ds[4]))*((quit+1)/(Y+ds[5]))*((length+1)/(Y+ds[6]))
for(L in 2:50){
Ps <- c(Ps, Y/16*((patch+1)/(Y+L*ds[1]))*((exercise+1)/(Y+L*ds[2]))*((probability+1)/(Y+L*ds[3]))*((help+1)/(Y+L*ds[4]))*((quit+1)/(Y+L*ds[5]))*((length+1)/(Y+L*ds[6])))}
return (Ps)}
P_NicotinePatch <- getTargetFunction(Y = 5, patch = 0, exercise = 0, probability = 1, help = 0, quit = 5, length = 0, ds = c(2,2,2,2,2,3))
P_Exercise <- getTargetFunction(Y = 6, patch = 0, exercise = 2, probability = 0, help = 1, quit = 6, length = 0, ds = c(2,2,2,2,2,3))
P_Smoking <- getTargetFunction(Y = 5, patch = 0, exercise = 0, probability = 0, help = 1, quit = 0, length = 2, ds = c(2,2,2,2,2,3))
plot(1:50, P_NicotinePatch, type='o', ylim=c(0,.0035), xlab="Laplace Smooth Tunning (L)",
ylab="Posterior Probability for Each Classification", col="red")
lines(1:50, P_Exercise, type='o', col="green")
lines(1:50, P_Smoking, type='b', col="blue")
legend("bottomright",
legend=c("Posterior Probability for Nicotine patch", "Posterior Probability for Exercise",
"Posterior Probability for Still Smoking"),
col=c("red", "green", "blue"), lty=c(1, 1), cex=1)
getTargetFunction <- function(Y, patch, exercise, probability, help, quit, length, ds){
Ps <- Y/16*((patch+1)/(Y+ds[1]))*((exercise+1)/(Y+ds[2]))*((probability+1)/(Y+ds[3]))*((help+1)/(Y+ds[4]))*((quit+1)/(Y+ds[5]))*((length+1)/(Y+ds[6]))
for(L in 2:50){
Ps <- c(Ps, Y/16*((patch+1)/(Y+L*ds[1]))*((exercise+1)/(Y+L*ds[2]))*((probability+1)/(Y+L*ds[3]))*((help+1)/(Y+L*ds[4]))*((quit+1)/(Y+L*ds[5]))*((length+1)/(Y+L*ds[6])))}
return (Ps)}
P_NicotinePatch <- getTargetFunction(Y = 5, patch = 0, exercise = 0, probability = 1, help = 0, quit = 5, length = 0, ds = c(2,2,2,2,2,3))
P_Exercise <- getTargetFunction(Y = 6, patch = 6, exercise = 2, probability = 0, help = 1, quit = 6, length = 0, ds = c(2,2,2,2,2,3))
P_Smoking <- getTargetFunction(Y = 5, patch = 0, exercise = 0, probability = 0, help = 1, quit = 0, length = 2, ds = c(2,2,2,2,2,3))
plot(1:50, P_NicotinePatch, type='o', ylim=c(0,.0035), xlab="Laplace Smooth Tunning (L)",
ylab="Posterior Probability for Each Classification", col="red")
lines(1:50, P_Exercise, type='o', col="green")
lines(1:50, P_Smoking, type='b', col="blue")
legend("bottomright",
legend=c("Posterior Probability for Nicotine patch", "Posterior Probability for Exercise",
"Posterior Probability for Still Smoking"),
col=c("red", "green", "blue"), lty=c(1, 1), cex=1)
getTargetFunction <- function(Y, patch, exercise, probability, help, quit, length, ds){
Ps <- Y/16*((patch+1)/(Y+ds[1]))*((exercise+1)/(Y+ds[2]))*((probability+1)/(Y+ds[3]))*((help+1)/(Y+ds[4]))*((quit+1)/(Y+ds[5]))*((length+1)/(Y+ds[6]))
for(L in 2:50){
Ps <- c(Ps, Y/16*((patch+1)/(Y+L*ds[1]))*((exercise+1)/(Y+L*ds[2]))*((probability+1)/(Y+L*ds[3]))*((help+1)/(Y+L*ds[4]))*((quit+1)/(Y+L*ds[5]))*((length+1)/(Y+L*ds[6])))}
return (Ps)}
P_NicotinePatch <- getTargetFunction(Y = 5, patch = 0, exercise = 0, probability = 1, help = 0, quit = 5, length = 0, ds = c(2,2,2,2,2,3))
P_Exercise <- getTargetFunction(Y = 6, patch = 6, exercise = 2, probability = 0, help = 1, quit = 6, length = 0, ds = c(2,2,2,2,2,3))
P_Smoking <- getTargetFunction(Y = 5, patch = 5, exercise = 0, probability = 0, help = 1, quit = 1, length = 2, ds = c(2,2,2,2,2,3))
plot(1:50, P_NicotinePatch, type='o', ylim=c(0,.0035), xlab="Laplace Smooth Tunning (L)",
ylab="Posterior Probability for Each Classification", col="red")
lines(1:50, P_Exercise, type='o', col="green")
lines(1:50, P_Smoking, type='b', col="blue")
legend("bottomright",
legend=c("Posterior Probability for Nicotine patch", "Posterior Probability for Exercise",
"Posterior Probability for Still Smoking"),
col=c("red", "green", "blue"), lty=c(1, 1), cex=1)
getTargetFunction <- function(Y, patch, exercise, probability, help, quit, length, ds){
Ps <- Y/16*((patch+1)/(Y+ds[1]))*((exercise+1)/(Y+ds[2]))*((probability+1)/(Y+ds[3]))*((help+1)/(Y+ds[4]))*((quit+1)/(Y+ds[5]))*((length+1)/(Y+ds[6]))
for(L in 2:50){
Ps <- c(Ps, Y/16*((patch+1)/(Y+L*ds[1]))*((exercise+1)/(Y+L*ds[2]))*((probability+1)/(Y+L*ds[3]))*((help+1)/(Y+L*ds[4]))*((quit+1)/(Y+L*ds[5]))*((length+1)/(Y+L*ds[6])))}
return (Ps)}
P_NicotinePatch <- getTargetFunction(Y = 5, patch = 0, exercise = 0, probability = 1, help = 0, quit = 5, length = 0, ds = c(2,2,2,2,2,3))
P_Exercise <- getTargetFunction(Y = 6, patch = 6, exercise = 2, probability = 0, help = 1, quit = 6, length = 0, ds = c(2,2,2,2,2,3))
P_Smoking <- getTargetFunction(Y = 5, patch = 5, exercise = 0, probability = 0, help = 1, quit = 1, length = 2, ds = c(2,2,2,2,2,3))
plot(1:50, P_NicotinePatch, type='o', ylim=c(0,.0001), xlab="Laplace Smooth Tunning (L)",
ylab="Posterior Probability for Each Classification", col="red")
lines(1:50, P_Exercise, type='o', col="green")
lines(1:50, P_Smoking, type='b', col="blue")
legend("bottomright",
legend=c("Posterior Probability for Nicotine patch", "Posterior Probability for Exercise",
"Posterior Probability for Still Smoking"),
col=c("red", "green", "blue"), lty=c(1, 1), cex=1)
getTargetFunction <- function(Y, patch, exercise, probability, help, quit, length, ds){
Ps <- Y/16*((patch+1)/(Y+ds[1]))*((exercise+1)/(Y+ds[2]))*((probability+1)/(Y+ds[3]))*((help+1)/(Y+ds[4]))*((quit+1)/(Y+ds[5]))*((length+1)/(Y+ds[6]))
for(L in 2:50){
Ps <- c(Ps, Y/16*((patch+L)/(Y+L*ds[1]))*((exercise+L)/(Y+L*ds[2]))*((probability+L)/(Y+L*ds[3]))*((help+L)/(Y+L*ds[4]))*((quit+L)/(Y+L*ds[5]))*((length+L)/(Y+L*ds[6])))}
return (Ps)}
P_NicotinePatch <- getTargetFunction(Y = 5, patch = 0, exercise = 0, probability = 1, help = 0, quit = 5, length = 0, ds = c(2,2,2,2,2,3))
P_Exercise <- getTargetFunction(Y = 6, patch = 6, exercise = 2, probability = 0, help = 1, quit = 6, length = 0, ds = c(2,2,2,2,2,3))
P_Smoking <- getTargetFunction(Y = 5, patch = 5, exercise = 0, probability = 0, help = 1, quit = 1, length = 2, ds = c(2,2,2,2,2,3))
plot(1:50, P_NicotinePatch, type='o', ylim=c(0,.0001), xlab="Laplace Smooth Tunning (L)",
ylab="Posterior Probability for Each Classification", col="red")
lines(1:50, P_Exercise, type='o', col="green")
lines(1:50, P_Smoking, type='b', col="blue")
legend("bottomright",
legend=c("Posterior Probability for Nicotine patch", "Posterior Probability for Exercise",
"Posterior Probability for Still Smoking"),
col=c("red", "green", "blue"), lty=c(1, 1), cex=1)
plot(1:50, P_NicotinePatch, type='o', ylim=c(0,.0005), xlab="Laplace Smooth Tunning (L)",
ylab="Posterior Probability for Each Classification", col="red")
getTargetFunction <- function(Y, patch, exercise, probability, help, quit, length, ds){
Ps <- Y/16*((patch+1)/(Y+ds[1]))*((exercise+1)/(Y+ds[2]))*((probability+1)/(Y+ds[3]))*((help+1)/(Y+ds[4]))*((quit+1)/(Y+ds[5]))*((length+1)/(Y+ds[6]))
for(L in 2:50){
Ps <- c(Ps, Y/16*((patch+L)/(Y+L*ds[1]))*((exercise+L)/(Y+L*ds[2]))*((probability+L)/(Y+L*ds[3]))*((help+L)/(Y+L*ds[4]))*((quit+L)/(Y+L*ds[5]))*((length+L)/(Y+L*ds[6])))}
return (Ps)}
P_NicotinePatch <- getTargetFunction(Y = 5, patch = 0, exercise = 0, probability = 1, help = 0, quit = 5, length = 0, ds = c(2,2,2,2,2,3))
P_Exercise <- getTargetFunction(Y = 6, patch = 6, exercise = 2, probability = 0, help = 1, quit = 6, length = 0, ds = c(2,2,2,2,2,3))
P_Smoking <- getTargetFunction(Y = 5, patch = 5, exercise = 0, probability = 0, help = 1, quit = 1, length = 2, ds = c(2,2,2,2,2,3))
plot(1:50, P_NicotinePatch, type='o', ylim=c(0,.0005), xlab="Laplace Smooth Tunning (L)",
ylab="Posterior Probability for Each Classification", col="red")
lines(1:50, P_Exercise, type='o', col="green")
lines(1:50, P_Smoking, type='b', col="blue")
legend("bottomright",
legend=c("Posterior Probability for Nicotine patch", "Posterior Probability for Exercise",
"Posterior Probability for Still Smoking"),
col=c("red", "green", "blue"), lty=c(1, 1), cex=1)
getTargetFunction <- function(Y, patch, exercise, probability, help, quit, length, ds){
Ps <- Y/16*((patch+1)/(Y+ds[1]))*((exercise+1)/(Y+ds[2]))*((probability+1)/(Y+ds[3]))*((help+1)/(Y+ds[4]))*((quit+1)/(Y+ds[5]))*((length+1)/(Y+ds[6]))
for(L in 2:50){
Ps <- c(Ps, Y/16*((patch+L)/(Y+L*ds[1]))*((exercise+L)/(Y+L*ds[2]))*((probability+L)/(Y+L*ds[3]))*((help+L)/(Y+L*ds[4]))*((quit+L)/(Y+L*ds[5]))*((length+L)/(Y+L*ds[6])))}
return (Ps)}
P_NicotinePatch <- getTargetFunction(Y = 5, patch = 0, exercise = 0, probability = 1, help = 0, quit = 5, length = 0, ds = c(2,2,2,2,2,3))
P_Exercise <- getTargetFunction(Y = 6, patch = 6, exercise = 2, probability = 0, help = 1, quit = 6, length = 0, ds = c(2,2,2,2,2,3))
P_Smoking <- getTargetFunction(Y = 5, patch = 5, exercise = 0, probability = 0, help = 1, quit = 1, length = 2, ds = c(2,2,2,2,2,3))
plot(1:50, P_NicotinePatch, type='o', ylim=c(0,.001), xlab="Laplace Smooth Tunning (L)",
ylab="Posterior Probability for Each Classification", col="red")
lines(1:50, P_Exercise, type='o', col="green")
lines(1:50, P_Smoking, type='b', col="blue")
legend("bottomright",
legend=c("Posterior Probability for Nicotine patch", "Posterior Probability for Exercise",
"Posterior Probability for Still Smoking"),
col=c("red", "green", "blue"), lty=c(1, 1), cex=1)
getTargetFunction <- function(Y, patch, exercise, probability, help, quit, length, ds){
Ps <- Y/16*((patch+1)/(Y+ds[1]))*((exercise+1)/(Y+ds[2]))*((probability+1)/(Y+ds[3]))*((help+1)/(Y+ds[4]))*((quit+1)/(Y+ds[5]))*((length+1)/(Y+ds[6]))
for(L in 2:50){
Ps <- c(Ps, Y/16*((patch+L)/(Y+L*ds[1]))*((exercise+L)/(Y+L*ds[2]))*((probability+L)/(Y+L*ds[3]))*((help+L)/(Y+L*ds[4]))*((quit+L)/(Y+L*ds[5]))*((length+L)/(Y+L*ds[6])))}
return (Ps)}
P_NicotinePatch <- getTargetFunction(Y = 5, patch = 0, exercise = 0, probability = 1, help = 0, quit = 5, length = 0, ds = c(2,2,2,2,2,3))
P_Exercise <- getTargetFunction(Y = 6, patch = 6, exercise = 2, probability = 0, help = 1, quit = 6, length = 0, ds = c(2,2,2,2,2,3))
P_Smoking <- getTargetFunction(Y = 5, patch = 5, exercise = 0, probability = 0, help = 1, quit = 1, length = 2, ds = c(2,2,2,2,2,3))
plot(1:50, P_NicotinePatch, type='o', ylim=c(0,.005), xlab="Laplace Smooth Tunning (L)",
ylab="Posterior Probability for Each Classification", col="red")
lines(1:50, P_Exercise, type='o', col="green")
lines(1:50, P_Smoking, type='b', col="blue")
legend("bottomright",
legend=c("Posterior Probability for Nicotine patch", "Posterior Probability for Exercise",
"Posterior Probability for Still Smoking"),
col=c("red", "green", "blue"), lty=c(1, 1), cex=1)
getTargetFunction <- function(Y, patch, exercise, probability, help, quit, length, ds){
Ps <- Y/16*((patch+1)/(Y+ds[1]))*((exercise+1)/(Y+ds[2]))*((probability+1)/(Y+ds[3]))*((help+1)/(Y+ds[4]))*((quit+1)/(Y+ds[5]))*((length+1)/(Y+ds[6]))
for(L in 2:10){
Ps <- c(Ps, Y/16*((patch+L)/(Y+L*ds[1]))*((exercise+L)/(Y+L*ds[2]))*((probability+L)/(Y+L*ds[3]))*((help+L)/(Y+L*ds[4]))*((quit+L)/(Y+L*ds[5]))*((length+L)/(Y+L*ds[6])))}
return (Ps)}
P_NicotinePatch <- getTargetFunction(Y = 5, patch = 0, exercise = 0, probability = 1, help = 0, quit = 5, length = 0, ds = c(2,2,2,2,2,3))
P_Exercise <- getTargetFunction(Y = 6, patch = 6, exercise = 2, probability = 0, help = 1, quit = 6, length = 0, ds = c(2,2,2,2,2,3))
P_Smoking <- getTargetFunction(Y = 5, patch = 5, exercise = 0, probability = 0, help = 1, quit = 1, length = 2, ds = c(2,2,2,2,2,3))
plot(1:10, P_NicotinePatch, type='o', ylim=c(0,.005), xlab="Laplace Smooth Tunning (L)",
ylab="Posterior Probability for Each Classification", col="red")
lines(1:10, P_Exercise, type='o', col="green")
lines(1:10, P_Smoking, type='b', col="blue")
legend("bottomright",
legend=c("Posterior Probability for Nicotine patch", "Posterior Probability for Exercise",
"Posterior Probability for Still Smoking"),
col=c("red", "green", "blue"), lty=c(1, 1), cex=1)
getTargetFunction <- function(Y, patch, exercise, probability, help, quit, length, ds){
Ps <- 0
for(L in 1:10){
Ps <- c(Ps, Y/16*((patch+L)/(Y+L*ds[1]))*((exercise+L)/(Y+L*ds[2]))*((probability+L)/(Y+L*ds[3]))*((help+L)/(Y+L*ds[4]))*((quit+L)/(Y+L*ds[5]))*((length+L)/(Y+L*ds[6])))}
return (Ps)}
P_NicotinePatch <- getTargetFunction(Y = 5, patch = 0, exercise = 0, probability = 1, help = 0, quit = 5, length = 0, ds = c(2,2,2,2,2,3))
P_Exercise <- getTargetFunction(Y = 6, patch = 6, exercise = 2, probability = 0, help = 1, quit = 6, length = 0, ds = c(2,2,2,2,2,3))
P_Smoking <- getTargetFunction(Y = 5, patch = 5, exercise = 0, probability = 0, help = 1, quit = 1, length = 2, ds = c(2,2,2,2,2,3))
plot(1:10, P_NicotinePatch, type='o', ylim=c(0,.005), xlab="Laplace Smooth Tunning (L)",
ylab="Posterior Probability for Each Classification", col="red")
getTargetFunction <- function(Y, patch, exercise, probability, help, quit, length, ds){
Ps <- 0
for(L in 1:10){
Ps <- c(Ps, Y/16*((patch+L)/(Y+L*ds[1]))*((exercise+L)/(Y+L*ds[2]))*((probability+L)/(Y+L*ds[3]))*((help+L)/(Y+L*ds[4]))*((quit+L)/(Y+L*ds[5]))*((length+L)/(Y+L*ds[6])))}
return (Ps)}
P_NicotinePatch <- getTargetFunction(Y = 5, patch = 0, exercise = 0, probability = 1, help = 0, quit = 5, length = 0, ds = c(2,2,2,2,2,3))
P_Exercise <- getTargetFunction(Y = 6, patch = 6, exercise = 2, probability = 0, help = 1, quit = 6, length = 0, ds = c(2,2,2,2,2,3))
P_Smoking <- getTargetFunction(Y = 5, patch = 5, exercise = 0, probability = 0, help = 1, quit = 1, length = 2, ds = c(2,2,2,2,2,3))
plot(0:10, P_NicotinePatch, type='o', ylim=c(0,.005), xlab="Laplace Smooth Tunning (L)",
ylab="Posterior Probability for Each Classification", col="red")
lines(0:10, P_Exercise, type='o', col="green")
lines(0:10, P_Smoking, type='b', col="blue")
legend("bottomright",
legend=c("Posterior Probability for Nicotine patch", "Posterior Probability for Exercise",
"Posterior Probability for Still Smoking"),
col=c("red", "green", "blue"), lty=c(1, 1), cex=1)
getTargetFunction <- function(Y, patch, exercise, probability, help, quit, length, ds){
Ps <- 0
for(L in 1:10){
Ps <- c(Ps, Y/16*((patch+L)/(Y+L*ds[1]))*((exercise+L)/(Y+L*ds[2]))*((probability+L)/(Y+L*ds[3]))*((help+L)/(Y+L*ds[4]))*((quit+L)/(Y+L*ds[5]))*((length+L)/(Y+L*ds[6])))}
return (Ps)}
P_NicotinePatch <- getTargetFunction(Y = 5, patch = 0, exercise = 0, probability = 1, help = 0, quit = 5, length = 0, ds = c(2,2,2,2,2,3))
P_Exercise <- getTargetFunction(Y = 6, patch = 6, exercise = 2, probability = 0, help = 1, quit = 6, length = 0, ds = c(2,2,2,2,2,3))
P_Smoking <- getTargetFunction(Y = 5, patch = 5, exercise = 0, probability = 0, help = 1, quit = 1, length = 2, ds = c(2,2,2,2,2,3))
plot(0:10, P_NicotinePatch, type='o', ylim=c(0,.003), xlab="Laplace Smooth Tunning (L)",
ylab="Posterior Probability for Each Classification", col="red")
lines(0:10, P_Exercise, type='o', col="green")
lines(0:10, P_Smoking, type='b', col="blue")
legend("bottomright",
legend=c("Posterior Probability for Nicotine patch", "Posterior Probability for Exercise",
"Posterior Probability for Still Smoking"),
col=c("red", "green", "blue"), lty=c(1, 1), cex=1)
getTargetFunction <- function(Y, patch, exercise, probability, help, quit, length, ds){
Ps <- 0
for(L in 1:10){
Ps <- c(Ps, Y/16*((patch+L)/(Y+L*ds[1]))*((exercise+L)/(Y+L*ds[2]))*((probability+L)/(Y+L*ds[3]))*((help+L)/(Y+L*ds[4]))*((quit+L)/(Y+L*ds[5]))*((length+L)/(Y+L*ds[6])))}
return (Ps)}
P_NicotinePatch <- getTargetFunction(Y = 5, patch = 0, exercise = 0, probability = 1, help = 0, quit = 5, length = 0, ds = c(2,2,2,2,2,3))
P_Exercise <- getTargetFunction(Y = 6, patch = 6, exercise = 2, probability = 0, help = 1, quit = 6, length = 0, ds = c(2,2,2,2,2,3))
P_Smoking <- getTargetFunction(Y = 5, patch = 5, exercise = 0, probability = 0, help = 1, quit = 1, length = 2, ds = c(2,2,2,2,2,3))
plot(0:10, P_NicotinePatch, type='l', ylim=c(0,.003), xlab="Laplace Smooth Tunning (L)",
ylab="Posterior Probability for Each Classification", col="red")
lines(0:10, P_Exercise, type='l', col="green")
lines(0:10, P_Smoking, type='l', col="blue")
legend("bottomright",
legend=c("Posterior Probability for Nicotine patch", "Posterior Probability for Exercise",
"Posterior Probability for Still Smoking"),
col=c("red", "green", "blue"), lty=c(1, 1), cex=1)
getTargetFunction <- function(Y, patch, exercise, probability, help, quit, length, ds){
Ps <- 0
for(L in 1:10){
Ps <- c(Ps, Y/16*((patch+L)/(Y+L*ds[1]))*((exercise+L)/(Y+L*ds[2]))*((probability+L)/(Y+L*ds[3]))*((help+L)/(Y+L*ds[4]))*((quit+L)/(Y+L*ds[5]))*((length+L)/(Y+L*ds[6])))}
return (Ps)}
P_NicotinePatch <- getTargetFunction(Y = 5, patch = 0, exercise = 0, probability = 1, help = 0, quit = 5, length = 0, ds = c(2,2,2,2,2,3))
P_Exercise <- getTargetFunction(Y = 6, patch = 6, exercise = 2, probability = 0, help = 1, quit = 6, length = 0, ds = c(2,2,2,2,2,3))
P_Smoking <- getTargetFunction(Y = 5, patch = 5, exercise = 0, probability = 0, help = 1, quit = 1, length = 2, ds = c(2,2,2,2,2,3))
plot(0:10, P_NicotinePatch, type='l', ylim=c(0,.003), xlab="Laplace Smooth Tunning (L)",
ylab="Posterior Probability for Each Classification", col="red")
lines(0:10, P_Exercise, type='l', col="green")
lines(0:10, P_Smoking, type='l', col="blue")
legend("bottomright",
legend=c("Posterior Probability for Nicotine patch", "Posterior Probability for Exercise",
"Posterior Probability for Still Smoking"),
col=c("red", "green", "blue"), lty=c(1, 1), cex=0.8)
textDataShort <- read.csv("./eurosat-w2020/codebook_compact.csv", header = T, stringsAsFactors = F)
setwd("~/Documents/waterloo/2020winter/Stat841/Stat841")
textDataShort <- read.csv("./eurosat-w2020/codebook_compact.csv", header = T, stringsAsFactors = F)
View(textDataShort)
View(textDataShort)
data(iris)
iris
iris.na
data(iris)
iris.na <- iris
set.seed(111)
## artificially drop some data values.
for (i in 1:4) iris.na[sample(150, sample(20)), i] <- NA
set.seed(222)
iris.imputed <- rfImpute(Species ~ ., iris.na)
set.seed(333)
iris.rf <- randomForest(Species ~ ., iris.imputed)
print(iris.rf)
install.packages("randomForest")
library(randomForest)
data(iris)
iris.na <- iris
set.seed(111)
## artificially drop some data values.
for (i in 1:4) iris.na[sample(150, sample(20)), i] <- NA
set.seed(222)
iris.imputed <- rfImpute(Species ~ ., iris.na)
set.seed(333)
iris.rf <- randomForest(Species ~ ., iris.imputed)
print(iris.rf)
View(iris.na)
getData <- function(name){
data <- read.csv(paste0("./eurosat-w2020/", name))
return (data)
}
train_data <- getData("train.csv")
test_data <- getData("test.csv")
is.na(train_data)
sum(is.na(train_data))
sum(is.na(test_data))
train_data[273]
head(train_data[273],5)
set.seed(222)
train_data.imputed <- rfImpute(satisfied ~ ., train_data)
train_data.imputed <- rfImpute(satisfied ~ ., train_data[1:53,])
sum(is.na(train_data$satisfied))
train_data.imputed <- rfImpute(satisfied ~ ., train_data[240:273,])
temp_data<-train_data[240:273,]
temp_data<-train_data[,240:273]
train_data.imputed <- rfImpute(satisfied ~ ., train_data[,240:273])
sum(is.na(temp_data))
temp_data<-train_data[,230:273]
sum(is.na(temp_data))
temp_data<-train_data[,200:273]
sum(is.na(temp_data))
temp_data<-train_data[,100:273]
sum(is.na(temp_data))
temp_data<-train_data[,120:273]
sum(is.na(temp_data))
temp_data<-train_data[,120:180]
sum(is.na(temp_data))
temp_data<-train_data[,130:170]
sum(is.na(temp_data))
train_data.imputed <- rfImpute(satisfied ~ ., train_data[,c(120:170,273)])
train_data[,c(120:170,273)]
temp_data<-train_data[,c(120:170,273)]
temp_data<-train_data[,c(120:170,273)]
temp_data<-train_data[,c(120:160,273)]
train_data.imputed <- rfImpute(satisfied ~ ., temp_data)
type(train_data)
typeof(train_data)
typeof(train_data[1])
typeof(train_data[1,1])
View(test_data)
View(iris)
View(textDataShort)
data <- read.csv(paste0("./eurosat-w2020/", "train_data.csv"))
setwd("~/Documents/waterloo/2020winter/Stat841/Stat841")
data <- read.csv(paste0("./eurosat-w2020/", "train_data.csv"))
data <- read.csv(paste0("./eurosat-w2020/", "train.csv"))
mydata <- data.frame(data)
View(mydata)
View(mydata)
typeof(mydata$v1)
typeof(mydata$v2)
nrow(textDataShort)
View(mydata)
View(textDataShort)
source('~/Documents/waterloo/2020winter/Stat841/Stat841/textParsing.R')
mydata <- data.frame(read.csv(paste0("./eurosat-w2020/", "train.csv")))
mydata <- data.frame(read.csv(paste0("./eurosat-w2020/", "train.csv")))
ncol(mydata)
nrow(mydata)
mydata2 <- data.frame(read.csv(paste0("./eurosat-w2020/", "test.csv")))
nrow(mydata2)
30080+9245
textDataShort <- read.csv("./eurosat-w2020/codebook_compact.csv", header = T, stringsAsFactors = F)
View(textDataShort)
train_data <- getData("train.csv")
getData <- function(name){
data <- read.csv(paste0("./eurosat-w2020/", name))
return (data)
}
train_data <- getData("train.csv")
test_data <- getData("test.csv")
train_data.imputed <- rfImpute(satisfied ~ ., train_data)
is.numeric(mydata$v1)
as.numeric(c(1,2,"a"))
is.numeric(1.3)
is.numeric(".")
mydata == ".a" || ".b" || ".c"
mydata == (".a" || ".b" || ".c")
mydata == ".a"
mydata[mydata == ".a" || mydata == ".b" || mydata == ".c"] = NA
sum(is.na(mydata))
mydata <- data.frame(read.csv(paste0("./eurosat-w2020/", "train.csv")))
sum(is.na(mydata))
View(mydata)
mydata[mydata == ".a" || mydata == ".b" || mydata == ".c"] = NA
mydata[mydata == ".a"] = NA
mydata <- mydata[mydata == ".a"] = NA
sum(mydata == ".a")
sum(mydata == ".b")
sum(mydata == ".c")
mydata <- data.frame(read.csv(paste0("./eurosat-w2020/", "train.csv")))
View(mydata)
sum(mydata == ".a")
(mydata == ".a")
sum(mydata == ".a")
mydata[mydata == ".a"] = NA
sum(is.na(mydata))
mydata[mydata == ".a" || mydata == ".b" || mydata == ".c"] = NA
sum(is.na(mydata))
View(mydata)
View(mydata)
mydata[mydata == ".b"] = NA
mydata[mydata == ".c"] = NA
View(mydata)
sum(is.na(mydata))
mydata[2]
View(mydata)
mydata <- data.frame(read.csv(paste0("./eurosat-w2020/", "train.csv")))
mydata[mydata == ".a"] <- NA
mydata[mydata == ".b"] <- NA
mydata[mydata == ".c"] <- NA
noMissing <- vector()
for(i in 1:nrow(textDataShort)){
if(textDataShort$Obs == 39325){
noMissing <- c(noMissing, i)
}else{
mydata[is.na(mydata[i+1])] <- textDataShort$Mean[i]
}
}
mydata <- data.frame(read.csv(paste0("./eurosat-w2020/", "train.csv")))
mydata[mydata == ".a"] <- NA
mydata[mydata == ".b"] <- NA
mydata[mydata == ".c"] <- NA
noMissing <- vector()
for(i in 1:nrow(textDataShort)){
if(textDataShort$Obs[i] == 39325){
noMissing <- c(noMissing, i)
}else{
mydata[is.na(mydata[i+1])] <- textDataShort$Mean[i]
}
}
ncol(mydata[1])
nrow(mydata[1])
for(i in 1:nrow(textDataShort)){
if(textDataShort$Obs[i] == 39325){
noMissing <- c(noMissing, i)
}else{
mydata[i+1, is.na(mydata[i+1])] <- textDataShort$Mean[i]
}
}
mydata[1][1]
mydata[2, is.na(mydata[2])] <- textDataShort$Mean[i]
is.na(mydata[2])
noMissing <- vector()
for(i in 1:nrow(textDataShort)){
if(textDataShort$Obs[i] == 39325){
noMissing <- c(noMissing, i)
}else{
mydata[is.na(mydata[i+1]), i+1] <- textDataShort$Mean[i]
}
}
View(mydata)
i = 5
mydata[is.na(mydata[i+1]), i+1] <- textDataShort$Mean[i]
mydata[is.na(mydata[i+1]), i+1]
textDataShort$Mean[i]
mydata[is.na(mydata[i+1]), i+1] <- textDataShort$Mean[i]
View(mydata)
View(mydata)
a <- is.numeric("10")
a <- as.numeric("10")
v <- c('a','b','c','e')
v[1:3] <- 3
v<- mydata[is.na(mydata[i+1]), i+1]
v
v <- mydata[1]
v[1]
v[,1]
v[1,1]
mydata[1,1]
mydata[2,1]
textDataShort$Mean[i]
mydata[is.na(mydata[6]), 6] <- textDataShort$Mean[5]
mydata <- data.frame(read.csv(paste0("./eurosat-w2020/", "train.csv")), stringsAsFactors = FALSE)
mydata <- data.frame(read.csv(paste0("./eurosat-w2020/", "train.csv")), stringsAsFactors = FALSE)
mydata[mydata == ".a"] <- NA
mydata[mydata == ".b"] <- NA
mydata[mydata == ".c"] <- NA
noMissing <- vector()
for(i in 1:nrow(textDataShort)){
if(textDataShort$Obs[i] == 39325){
noMissing <- c(noMissing, i)
}else{
mydata[is.na(mydata[i+1]), i+1] <- textDataShort$Mean[i]
}
}
View(mydata)
mydata[is.na(mydata[6]), 6] <- textDataShort$Mean[5]
mydata <- data.frame(read.csv(paste0("./eurosat-w2020/", "train.csv"), stringsAsFactors=FALSE), stringsAsFactors = FALSE)
mydata[mydata == ".a"] <- NA
mydata[mydata == ".b"] <- NA
mydata[mydata == ".c"] <- NA
noMissing <- vector()
for(i in 1:nrow(textDataShort)){
if(textDataShort$Obs[i] == 39325){
noMissing <- c(noMissing, i)
}else{
mydata[is.na(mydata[i+1]), i+1] <- textDataShort$Mean[i]
}
}
mydata[is.na(mydata[6]), 6] <- textDataShort$Mean[5]
View(mydata)
sum(is.na(mydata))
load("getData.R")
load("fillMissingDataByMean.R")
train_data <- fillMissingDataByMean(getData("train.csv"))
test_data <- fillMissingDataByMean(getData("test.csv"))
setwd("~/Documents/waterloo/2020winter/Stat841/Stat841")
load("getData.R")
load("fillMissingDataByMean.R")
train_data <- fillMissingDataByMean(getData("train.csv"))
test_data <- fillMissingDataByMean(getData("test.csv"))
load("getData.R")
load("fillMissingDataByMean.R")
load(".\getData.R")
load(".\fillMissingDataByMean.R")
load(".\getData.R")
load(".\fillMissingDataByMean.R")
load(".\getData.R")
load(".\fillMissingDataByMean.R")
load(".\getData.R")
load(".\fillMissingDataByMean.R")
load(".\getData.R")
load(".\fillMissingDataByMean.R")
load(".\getData.R")
load(".\fillMissingDataByMean.R")
load(".\getData.R")
load(".\fillMissingDataByMean.R")
load(".\getData.R")
load(".\fillMissingDataByMean.R")
load(".\getData.R")
load(".\fillMissingDataByMean.R")
load(".\getData.R")
load(".\fillMissingDataByMean.R")
load(".\getData.R")
load(".\fillMissingDataByMean.R")
load(".\getData.R")
load(".\fillMissingDataByMean.R")
load(".\getData.R")
load(".\fillMissingDataByMean.R")
load(".\getData.R")
load(".\fillMissingDataByMean.R")
load(".\getData.R")
load(".\fillMissingDataByMean.R")
